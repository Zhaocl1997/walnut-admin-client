/**
 * Generated by Doubao, optimised by me
 * 创建一个可获取百分比的计时器
 * @param durationRef 计时器总时长（毫秒），支持响应式Ref
 * @param callback 时间更新时的回调函数
 */
export function useIntervalFnWithPercent(
  durationRef: Ref<number>,
  callback: () => void,
) {
  const percentInterval = 33

  const flag = ref(true)
  const startTime = ref<number>()
  const elapsed = ref(0)

  // 计算并返回当前百分比
  const percentage = computed(() =>
    +Math.min(100, (elapsed.value / durationRef.value) * 100).toFixed(2),
  )

  // 监听百分比变化，当达到100%时重置
  watchThrottled(() => percentage.value, async (newValue) => {
    if (newValue >= 100) {
      flag.value = false
      await nextTick()
      reset()
      flag.value = true
    }
  }, { throttle: 250 })

  // 时间更新函数
  const updateTime = () => {
    const now = Date.now()
    if (!startTime.value)
      startTime.value = now

    // 计算实际流逝的时间
    const delta = now - (startTime.value + elapsed.value)

    // 避免异常大的时间差（如页面被冻结后恢复）
    if (delta < 1000) {
      elapsed.value += delta
    }
  }

  // 创建两个独立的useIntervalFn实例
  const timeControls = useIntervalFn(
    callback,
    durationRef,
    { immediate: true },
  )

  const percentControls = useIntervalFn(
    updateTime,
    percentInterval,
    { immediateCallback: true },
  )

  const isActive = computed(() => timeControls.isActive.value && percentControls.isActive.value)

  // 开始计时器
  function start() {
    timeControls.resume()
    percentControls.resume()
  }

  // 暂停计时器
  function pause() {
    timeControls.pause()
    percentControls.pause()
  }

  // 重置计时器
  function reset() {
    pause()
    startTime.value = Date.now()
    elapsed.value = 0
    start()
  }

  // 销毁计时器
  function destroy() {
    pause()
    startTime.value = null
  }

  onMounted(start)

  onUnmounted(destroy)

  return {
    start,
    pause,
    reset,
    flag,
    percentage,
    elapsed,
    isActive,
  }
}
