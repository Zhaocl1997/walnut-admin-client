// generated by doubao
// Track loaded stylesheets (store href)
const loadedLinks: Ref<Set<string>> = ref(new Set())

/**
 * Dynamically manage <link> tags in the document (TypeScript version)
 * @param baseHref Base href for stylesheets (optional, can be overridden per method)
 * @returns Collection of methods to manipulate stylesheets
 */
export function useLinkTag(baseHref?: string) {
  /**
   * Load a stylesheet
   * @param href URL of the stylesheet (uses baseHref if not provided)
   * @param id Unique identifier for the stylesheet (optional, used for precise unloading)
   * @param attributes Additional HTML attributes (e.g., crossorigin, media, etc., optional)
   * @returns Promise (resolves on successful load, rejects on failure)
   */
  const loadLink = (
    href: string = baseHref || '',
    id?: string,
    attributes: Record<string, string> = {},
  ): Promise<void> => {
    // Validate href
    if (!href) {
      return Promise.reject(new Error('Href must be provided either as argument or through baseHref'))
    }

    // Avoid duplicate loading
    if (loadedLinks.value.has(href)) {
      return Promise.resolve()
    }

    return new Promise((resolve, reject) => {
      try {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = href

        // Set ID (for quick lookup when unloading)
        if (id) {
          link.id = id
        }

        // Apply additional attributes (e.g., crossorigin, media queries, etc.)
        for (const [key, value] of Object.entries(attributes)) {
          link.setAttribute(key, value)
        }

        // Success callback
        link.onload = () => {
          loadedLinks.value.add(href)
          resolve()
        }

        // Failure callback
        link.onerror = (error) => {
          console.error(`[useDocumentLink] Failed to load stylesheet: ${href}`, error)
          // Clean up invalid link element
          if (link.parentNode) {
            link.parentNode.removeChild(link)
          }
          reject(new Error(`Failed to load CSS: ${href}`))
        }

        // Insert into document head
        document.head.appendChild(link)
      }
      catch (error) {
        console.error(`[useDocumentLink] Error creating stylesheet: ${href}`, error)
        reject(error)
      }
    })
  }

  /**
   * Unload a stylesheet
   * @param href URL of the stylesheet (uses baseHref if not provided)
   * @param id Unique identifier for the stylesheet (searched first for higher precision)
   * @returns Whether the stylesheet was successfully unloaded
   */
  const unloadLink = (
    href: string = baseHref || '',
    id?: string,
  ): boolean => {
    // Validate href
    if (!href) {
      console.error('[useDocumentLink] Href must be provided either as argument or through baseHref')
      return false
    }

    let targetLink: HTMLLinkElement | null = null

    // Search by ID first
    if (id) {
      targetLink = document.getElementById(id) as HTMLLinkElement | null
    }
    else {
      // Otherwise match by href (handle possible cache or URL parameter differences)
      targetLink = Array.from<HTMLLinkElement>(document.querySelectorAll('link[rel="stylesheet"]')).find(
        link => link.href.includes(href), // Fuzzy match to avoid cache parameter interference
      ) || null
    }

    if (targetLink && targetLink.parentNode) {
      targetLink.parentNode.removeChild(targetLink)
      loadedLinks.value.delete(href)
      return true
    }
    return false
  }

  /**
   * Toggle a stylesheet (load if not present, unload if present)
   * @param href URL of the stylesheet (uses baseHref if not provided)
   * @param id Unique identifier for the stylesheet (optional)
   * @param attributes Additional attributes for the stylesheet (optional)
   * @returns Promise (resolves with true on successful toggle, false on failure)
   */
  const toggleLink = async (
    href: string = baseHref || '',
    id?: string,
    attributes: Record<string, string> = {},
  ): Promise<boolean> => {
    // Validate href
    if (!href) {
      console.error('[useDocumentLink] Href must be provided either as argument or through baseHref')
      return false
    }

    try {
      const isLoaded = loadedLinks.value.has(href)

      if (isLoaded) {
        // If already loaded, unload it
        return unloadLink(href, id)
      }
      else {
        // If not loaded, load it
        await loadLink(href, id, attributes)
        return true
      }
    }
    catch (error) {
      console.error(`[useDocumentLink] Failed to toggle stylesheet: ${href}`, error)
      return false
    }
  }

  /**
   * Check if a stylesheet is already loaded
   * @param href URL of the stylesheet (uses baseHref if not provided)
   * @returns Whether the stylesheet is loaded
   */
  const isLinkLoaded = (href: string = baseHref || ''): boolean => {
    // Validate href
    if (!href) {
      console.error('[useDocumentLink] Href must be provided either as argument or through baseHref')
      return false
    }

    return loadedLinks.value.has(href)
  }

  /**
   * Clean up all stylesheets loaded through this Hook
   */
  const cleanupAllLinks = (): void => {
    loadedLinks.value.forEach((href) => {
      unloadLink(href)
    })
    loadedLinks.value.clear()
  }

  return {
    loadLink,
    unloadLink,
    toggleLink,
    isLinkLoaded,
    cleanupAllLinks,
    loadedLinks, // Expose reactive state (for monitoring load status if needed)
  }
}
