import type { AxiosAdapter, AxiosRequestConfig, Canceler } from 'axios'
import axios from 'axios'
import { nanoid } from 'nanoid'

const CancelToken = axios.CancelToken

interface IAxiosCancelPoolItem {
    // key, generated by buildSortedURL
    k: string;
    // path, location.pathname
    p: string;
    // cancel function
    c: Canceler;
}

const AxiosCancelPoolRef = shallowRef(new Map<string, IAxiosCancelPoolItem>())

function addToCancelPool(config: AxiosRequestConfig, id: string, pathname: string, cancel: Canceler) {
    const key = buildSortedURL(config.url, config.params, config.paramsSerializer)

    AxiosCancelPoolRef.value.set(id, {
        k: key,
        p: pathname,
        c: () => {
            AppInfo(`Axios cancel request: key => ${key}; id => ${id}`)
            cancel()
        }
    })
}

function removeFromCancelPool(id: string, excuteCancel = false) {
    const target = AxiosCancelPoolRef.value.get(id)

    if (target) {
        excuteCancel && target.c()
        AxiosCancelPoolRef.value.delete(id)
    }
}

// cancel the latest request that do not receive a response
export function removeLatestRequest() {
    const lastestItem = Array.from(AxiosCancelPoolRef.value).pop()

    if (lastestItem) {
        lastestItem[1].c()
        AxiosCancelPoolRef.value.delete(lastestItem[0])
    }
}

// cancel all the request that currently do not have a response
export function removeAllCancel() {
    const arr = Array.from(AxiosCancelPoolRef.value)

    for (let i = 0; i < arr.length; i++) {
        const id = arr[i][0]
        const element = arr[i][1]
        element.c()
        AxiosCancelPoolRef.value.delete(id)
    }
}

// remove all requests in current page from cancel pool
export function removeCurrentPageRequests(path: string) {
    const arr = Array.from(AxiosCancelPoolRef.value).filter(i => i[1].p === path)

    for (let i = 0; i < arr.length; i++) {
        const id = arr[i][0]
        const element = arr[i][1]
        element.c()
        AxiosCancelPoolRef.value.delete(id)
    }
}

export function cancelAdapterEnhancer(adapter: AxiosAdapter): AxiosAdapter {
    return async (config) => {
        const requestId = nanoid(16)

        // generate request id
        config._request_id = requestId

        // generate cancel token and add to cancel pool
        config.cancelToken = new CancelToken(c => addToCancelPool(config, requestId, location.pathname, c))
        // set pathname to current request to identify which page is current request sent
        config._request_from_route_path = location.pathname

        const res = await adapter(config)

        // request finished, remove from the cancel pool
        if (AxiosCancelPoolRef.value.has(requestId)) {
            removeFromCancelPool(requestId)
        }

        return res
    }
}
