import type { App } from 'vue'
import type { I18n, I18nOptions, Locale } from 'vue-i18n'
import { createI18n } from 'vue-i18n'

/**
 * @description i18n
 * quick generated by doubao
 */
class I18nService {
  private static instance: I18nService
  private _i18n: I18n<Record<string, unknown>, Record<string, unknown>, Record<string, unknown>, Locale, false> | null = null

  private constructor() {}

  public static getInstance(): I18nService {
    if (!I18nService.instance) {
      I18nService.instance = new I18nService()
    }
    return I18nService.instance
  }

  private async createI18nOptions(): Promise<I18nOptions> {
    const appLocale = useAppStoreLocale()
    const locale = appLocale.locale
    const backendMsg = await AppI18nGetI18nMsg(locale)

    return {
      legacy: false,
      locale,
      messages: {
        [locale]: backendMsg,
      },
    }
  }

  public async init(app: App): Promise<void> {
    if (this._i18n) {
      console.info('I18n', 'Already initialized')
      return
    }

    const options = await this.createI18nOptions()
    this._i18n = createI18n<false>(options)
    app.use(this._i18n)
    console.info('I18n', 'Locale initialized successfully')
  }

  public get i18n() {
    if (!this._i18n) {
      throw new Error('I18n not initialized. Call init() first.')
    }
    return this._i18n
  }
}

const i18nService = I18nService.getInstance()

export async function setupI18n(app: App) {
  await i18nService.init(app)
}

export const AppI18n = () => i18nService.i18n

export const useAppI18n = () => useI18n()
